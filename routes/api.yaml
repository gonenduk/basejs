openapi: 3.0.0
servers:
  - url: /api
info:
  title: basejs API
  version: 0.0.1
  description: Documentation of the RESTful API exposed by basejs
security:
  - JWT: []
paths:
  /auth/token/credentials:
    post:
      tags:
        - Authentication
      summary: Sign in existing user by credentials and return JWTs
      security: []
      operationId: signInWithCredentials
      x-eov-operation-handler: auth
      responses:
        '200':
          description: New generated JWTs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRefreshJWTs'
        default:
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: email or username
                password:
                  type: string
                  format: password
        description: User credentials
        required: true
  /auth/token/refresh:
    post:
      tags:
        - Authentication
      summary: Renew JWTs based on a refresh token
      security: []
      operationId: signInWithRefreshToken
      x-eov-operation-handler: auth
      responses:
        '200':
          description: New generated JWTs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRefreshJWTs'
        default:
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
        description: refresh token
        required: true
  /auth/token/oauth:
    post:
      tags:
        - Authentication
      summary: Sign in or sign up a user by OAuth provider token and return JWTs
      security: []
      operationId: signInWithOAuthToken
      x-eov-operation-handler: auth
      responses:
        '200':
          description: New generated JWTs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRefreshJWTs'
        default:
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - provider
                - token
              properties:
                provider:
                  type: string
                token:
                  type: string
        description: OAuth provider and its access token
        required: true
  /auth/token:
    delete:
      tags:
        - Authentication
      summary: Sign out current user and invalidate existing refresh tokens
      operationId: signOut
      x-eov-operation-handler: auth
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /auth/oauth:
    delete:
      tags:
        - Authentication
      summary: Disconnect current user from OAuth provider
      operationId: disconnectOAuthProvider
      x-eov-operation-handler: auth
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - provider
              properties:
                provider:
                  type: string
        description: OAuth provider
        required: true
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      parameters:
        - $ref: '#/components/parameters/filterParam'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/skipParam'
        - $ref: '#/components/parameters/limitParam'
      operationId: getUsers
      x-eov-operation-handler: users
      responses:
        '200':
          description: Users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      tags:
        - Users
      summary: Create a user
      security: []
      operationId: createUser
      x-eov-operation-handler: users
      responses:
        '201':
          description: New user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/User'
                - required:
                  - email
                  - password
        description: User to create
        required: true
  /users/{id}:
    parameters:
      - $ref: '#/components/parameters/idParam'
    get:
      tags:
        - Users
      summary: Get a user by id
      operationId: getUser
      x-eov-operation-handler: users
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/ErrorResponse'
    patch:
      tags:
        - Users
      summary: Update user fields by id
      operationId: updateUser
      x-eov-operation-handler: users
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User fields to update
        required: true
  /users/{id}/role:
    parameters:
    - $ref: '#/components/parameters/idParam'
    put:
      tags:
        - Users
      summary: Set user role
      operationId: updateUserRole
      x-eov-operation-handler: users
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        content:
          text/plain:
            schema:
              type: string
              enum:
                - user
                - moderator
                - admin
        description: New role
        required: true
  /profiles/{id}:
    parameters:
      - $ref: '#/components/parameters/idParam'
    get:
      tags:
        - Users
      summary: Get a user profile by id
      security:
        - {}
        - JWT: []
      operationId: getProfile
      x-eov-operation-handler: profiles
      responses:
        '200':
          description: Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /products:
    get:
      tags:
        - Products
      summary: Get all products
      security:
        - {}
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/filterParam'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/skipParam'
        - $ref: '#/components/parameters/limitParam'
      operationId: getProducts
      x-eov-operation-handler: products
      responses:
        '200':
          description: Products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      tags:
        - Products
      summary: Create a product
      operationId: createProduct
      x-eov-operation-handler: products
      responses:
        '201':
          description: New product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Product'
                - required:
                  - title
        description: Product to create
        required: true
  /products/{id}:
    parameters:
      - $ref: '#/components/parameters/idParam'
    get:
      tags:
        - Products
      summary: Get a product by id
      security:
        - {}
        - JWT: []
      operationId: getProduct
      x-eov-operation-handler: products
      responses:
        '200':
          description: Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          $ref: '#/components/responses/ErrorResponse'
    patch:
      tags:
        - Products
      summary: Update product fields by id
      operationId: updateProduct
      x-eov-operation-handler: products
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        description: Product fields to update
        required: true
    delete:
      tags:
        - Products
      summary: Delete a product by id
      operationId: deleteProduct
      x-eov-operation-handler: products
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /products/{id}/owner:
    parameters:
      - $ref: '#/components/parameters/idParam'
    put:
      tags:
        - Products
      summary: Replace owner of product
      operationId: updateProductOwner
      x-eov-operation-handler: products
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        description: New owner id
        required: true
  /tickets:
    get:
      tags:
        - Tickets
      summary: Get all tickets
      parameters:
        - $ref: '#/components/parameters/filterParam'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/skipParam'
        - $ref: '#/components/parameters/limitParam'
      operationId: getTickets
      x-eov-operation-handler: tickets
      responses:
        '200':
          description: Tickets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketList'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      tags:
        - Tickets
      summary: Create a ticket
      operationId: createTicket
      x-eov-operation-handler: tickets
      responses:
        '201':
          description: New ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        default:
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Ticket'
                - required:
                    - title
        description: Ticket to create
        required: true
  /tickets/{id}:
    parameters:
      - $ref: '#/components/parameters/idParam'
    get:
      tags:
        - Tickets
      summary: Get a ticket by id
      operationId: getTicket
      x-eov-operation-handler: tickets
      responses:
        '200':
          description: Ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        default:
          $ref: '#/components/responses/ErrorResponse'
    patch:
      tags:
        - Tickets
      summary: Update ticket fields by id
      operationId: updateTicket
      x-eov-operation-handler: tickets
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
        description: Ticket fields to update
        required: true
    delete:
      tags:
        - Tickets
      summary: Delete a ticket by id
      operationId: deleteTicket
      x-eov-operation-handler: tickets
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
  /tickets/{id}/owner:
    parameters:
      - $ref: '#/components/parameters/idParam'
    put:
      tags:
        - Tickets
      summary: Replace owner of ticket
      operationId: updateTicketOwner
      x-eov-operation-handler: tickets
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        description: New owner id
        required: true
tags:
  - name: Authentication
  - name: Users
  - name: Products
    description: Sample public collection
  - name: Tickets
    description: Sample private collection
components:
  responses:
    NoContentResponse:
      description: OK
    ErrorResponse:
      description: Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    idParam:
      name: id
      in: path
      description: id of item
      required: true
      schema:
        type: string
    filterParam:
      name: filter
      in: query
      description: 'Filter by { "field": "value", ... }'
      schema:
        type: string
    sortParam:
      name: sort
      in: query
      description: 'Sort by { "field": "asc/desc", "field": 1/-1, ... }'
      schema:
        type: string
    skipParam:
      name: skip
      in: query
      description: Number of items to skip
      schema:
        type: integer
        minimum: 0
    limitParam:
      name: limit
      in: query
      description: Number of items to return (1 - 100, default is 20)
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: Bearer
  schemas:
    User:
      allOf:
        - $ref: '#/components/schemas/MongoID'
        - type: object
          properties:
            username:
              type: string
            email:
              type: string
            password:
              type: string
              format: password
              writeOnly: true
            role:
              type: string
              enum:
                - user
                - moderator
                - admin
              readOnly: true
            signedOutAt:
              type: string
              format: date-time
              readOnly: true
        - $ref: '#/components/schemas/TimeStamp'
    UserList:
      type: array
      items:
        $ref: '#/components/schemas/User'
    Profile:
      allOf:
        - $ref: '#/components/schemas/MongoID'
        - type: object
          properties:
            username:
              type: string
    Product:
      allOf:
        - $ref: '#/components/schemas/MongoID'
        - type: object
          properties:
            title:
              type: string
            price:
              type: number
        - $ref: '#/components/schemas/OwnerID'
        - $ref: '#/components/schemas/TimeStamp'
    ProductList:
      type: array
      items:
        $ref: '#/components/schemas/Product'
    Ticket:
      allOf:
        - $ref: '#/components/schemas/MongoID'
        - type: object
          properties:
            title:
              type: string
            venue:
              type: string
            price:
              type: number
        - $ref: '#/components/schemas/OwnerID'
        - $ref: '#/components/schemas/TimeStamp'
    TicketList:
      type: array
      items:
        $ref: '#/components/schemas/Ticket'
    MongoID:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
    OwnerID:
      type: object
      properties:
        ownerId:
          type: string
          readOnly: true
    TimeStamp:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    Error:
      type: object
      required:
        - statusCode
      properties:
        statusCode:
          type: integer
        error:
          type: string
        message:
          type: string
    AccessRefreshJWTs:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
